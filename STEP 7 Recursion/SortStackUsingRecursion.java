// Code Generated by Sidekick is for learning and experimentation purposes only.

import java.util.Stack;

public class SortStackUsingRecursion {

    public static Stack<Integer> sort(Stack<Integer> s) {
        if (s.isEmpty()) {
            return s;
        }
        int topEle = s.pop();
        sort(s);
        insertInSortedOrder(s, topEle);

        return s;
    }

    static void insertInSortedOrder(Stack<Integer> stack, int topEle) {
        if (stack.isEmpty() || topEle > stack.peek()) {
            stack.push(topEle);
            return;
        }

        int temp = stack.pop();
        insertInSortedOrder(stack, topEle);
        stack.push(temp);
    }

    static void reverse(Stack<Integer> s) {
        if (s.isEmpty())
            return;
        // s.reversed();
        int ele = s.pop();
        reverse(s);
        addInReverseOrder(s, ele);
        // for (Integer integer : s) {
        //     System.out.print(integer + " ");
        // }
    }

    static void addInReverseOrder(Stack<Integer> stack, int ele) {
        if (stack.isEmpty()) {
            stack.push(ele);
            return;
        }
        int temp = stack.pop();
        addInReverseOrder(stack, ele);
        stack.push(temp);
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.push(4);

        reverse(stack);
        // System.out.print("Before sorting : ");
        // for (Integer integer : stack) {
        // System.out.print(integer + " ");
        // }

        sort(stack);

        // System.out.print("\nAfter sorting : ");
        // while (!stack.isEmpty()) {
        // System.out.print(stack.pop() + " ");
        // }
    }
}
