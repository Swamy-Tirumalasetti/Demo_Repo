// Code Generated by Sidekick is for learning and experimentation purposes only.

import java.util.Stack;

public class SumOfSubArrMin {

    public static int sumSubarrayMins(int[] arr) {
        int n = arr.length;
        int[] nse = nextSmallerElement(arr);
        int[] pse = previousSmallerElement(arr);

        long total = 0, mod = (int) (1e9 + 7);

        for (int i = 0; i < n; i++) {
            int left = i - pse[i];
            int right = nse[i] - i;
            total = (total + (right * left * 1L * arr[i]) % mod) % mod;
        }
        return (int) total;
    }

    private static int[] nextSmallerElement(int[] arr) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>();
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            res[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        return res;
    }

    private static int[] previousSmallerElement(int[] arr) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>();
        int[] res = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            res[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        return res;  //[-1, -1, 1, 2].
    }

    public static void main(String[] args) {
        int[] arr = { 3, 1, 2, 4 };
        System.out.println(sumSubarrayMins(arr)); // Output: 17
    }
}
